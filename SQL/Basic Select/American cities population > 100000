1. Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| Name        | varchar2(17) |
| CountryCode | varchar2(3)  |
| District    | varchar(10)  |
| Population  | number       |
+-------------+--------------+

Solution:

SELECT * FROM CITY
WHERE POPULATION > 100000 AND COUNTRYCODE="USA"

2. Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| Name        | varchar2(17) |
| CountryCode | varchar2(3)  |
| District    | varchar(10)  |
| Population  | number       |
+-------------+--------------+

Solution:

SELECT * FROM CITY
WHERE POPULATION > 120000 AND COUNTRYCODE="USA";

3. Select All
Query all columns (attributes) for every row in the CITY table.

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| Name        | varchar2(17) |
| CountryCode | varchar2(3)  |
| District    | varchar(10)  |
| Population  | number       |
+-------------+--------------+

Solution:

SELECT * FROM CITY;

4. Query all columns for a city in CITY with the ID 1661.

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| Name        | varchar2(17) |
| CountryCode | varchar2(3)  |
| District    | varchar(10)  |
| Population  | number       |
+-------------+--------------+

Solution:

SELECT * FROM CITY
WHERE ID = 1661;

5. Japanese Cities' Attributes
Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| Name        | varchar2(17) |
| CountryCode | varchar2(3)  |
| District    | varchar(10)  |
| Population  | number       |
+-------------+--------------+

Solution:

SELECT * FROM CITY
WHERE POPULATION > 120000 AND COUNTRYCODE="JPN";

6. Japanese Cities' Names
Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| Name        | varchar2(17) |
| CountryCode | varchar2(3)  |
| District    | varchar(10)  |
| Population  | number       |
+-------------+--------------+

Solution:

SELECT Name FROM CITY
WHERE POPULATION > 120000 AND COUNTRYCODE="JPN";

7. Weather Observation Station 1
Query a list of CITY and STATE from the STATION table.

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Solution:

SELECT CITY, STATE FROM STATION;

8. Weather Observation Station 2
Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.
Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Output Format

Your results must be in the form:

lat lon
where lat is the sum of all values in LAT_N and long is the sum of all values in LONG_W. Both results must be rounded to a scale of 2 decimal places.

Solution:

SELECT ROUND(SUM(LAT_N),2), ROUND(SUM(LONG_W),2) FROM STATION;

9. Weather Observation Station 3
Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Solution:

SELECT DISTINCT(CITY) FROM STATION
WHERE ID % 2 = 0;

10. Weather Observation Station 4
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.
For example, if there are three records in the table with CITY values 'New York', 'New York', 'Bengalaru', 
there are 2 different city names: 'New York' and 'Bengalaru'. The query returns 1, because 
total number of records - number of unique city names = 3 - 2 = 1.

Solution:

SELECT COUNT(CITY) - COUNT(DISTINCT(CITY)) FROM STATION;

11. Weather Observation Station 5
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Sample Input

For example, CITY has four entries: DEF, ABC, PQRS and WXY.

Sample Output

ABC 3
PQRS 4
Explanation

When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths 3, 3, 4 and 3. 
The longest name is PQRS, but there are 3 options for shortest named city. Choose ABC, because it comes first alphabetically.

Note
You can write two separate queries to get the desired output. It need not be a single query.

Solution:

(SELECT CITY, LENGTH(CITY) FROM STATION
GROUP BY CITY
ORDER BY 2 ASC, CITY
LIMIT 1)
UNION
(SELECT CITY, LENGTH(CITY) FROM STATION
GROUP BY CITY
ORDER BY 2 DESC, CITY
LIMIT 1);

12. Weather Observation Station 6
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

SELECT DISTINCT(CITY) FROM STATION
WHERE CITY LIKE "a%" OR CITY LIKE "e%" OR CITY LIKE "i%" OR CITY LIKE "o%" OR CITY LIKE "u%";

13. Weather Observation Station 7
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Solution:

SELECT DISTINCT(CITY) FROM STATION
WHERE CITY LIKE "%a" OR CITY LIKE "%e" OR CITY LIKE "%i" OR CITY LIKE "%o" OR CITY LIKE "%u";

14. Weather Observation Station 8
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Solution:

SELECT DISTINCT(CITY) FROM STATION
WHERE (CITY LIKE "a%" OR CITY LIKE "e%" OR CITY LIKE "i%" OR CITY LIKE "o%" OR CITY LIKE "u%") AND (CITY LIKE "%a" OR CITY LIKE "%e" OR CITY LIKE "%i" OR CITY LIKE "%o" OR CITY LIKE "%u");

15. Weather Observation Station 9
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Solution:

SELECT DISTINCT(CITY) FROM STATION
WHERE NOT (CITY LIKE "a%" OR CITY LIKE "e%" OR CITY LIKE "i%" OR CITY LIKE "o%" OR CITY LIKE "u%")

16. Weather Observation Station 10
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

Input Format

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.
The STATION table is described as follows:

Solution:

SELECT DISTINCT(CITY) FROM STATION
WHERE NOT (CITY LIKE "%a" OR CITY LIKE "%e" OR CITY LIKE "%i" OR CITY LIKE "%o" OR CITY LIKE "%u");

17. Weather Observation Station 11
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Solution:

SELECT DISTINCT(CITY) FROM STATION
WHERE NOT (CITY LIKE "a%" OR CITY LIKE "e%" OR CITY LIKE "i%" OR CITY LIKE "o%" OR CITY LIKE "u%") 
      OR NOT (CITY LIKE "%a" OR CITY LIKE "%e" OR CITY LIKE "%i" OR CITY LIKE "%o" OR CITY LIKE "%u");

18. Weather Observation Station 12
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

Solution:

SELECT DISTINCT(CITY) FROM STATION
WHERE NOT (CITY LIKE "a%" OR CITY LIKE "e%" OR CITY LIKE "i%" OR CITY LIKE "o%" OR CITY LIKE "u%") 
      AND NOT (CITY LIKE "%a" OR CITY LIKE "%e" OR CITY LIKE "%i" OR CITY LIKE "%o" OR CITY LIKE "%u");

19. Weather Observation Station 13


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

20. Weather Observation Station 14


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

21. Weather Observation Station 15

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

22. Weather Observation Station 16


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

23. Weather Observation Station 17

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | number       |
| CITY        | varchar2(21) |
| STATE       | varchar2(3)  |
| LAT_N       | number       |
| LONG_W      | number       |
+-------------+--------------+
where LAT_N is the northern latitude and LONG_W is the western longitude.

22. Higher Than 75 Marks
Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

Input Format
